"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../typings/main.d.ts" />
var ts = require("./typesystem");
var messageRegistry = ts.messageRegistry;
var typesystem_1 = require("./typesystem");
var restrictions_1 = require("./restrictions");
var _ = require("underscore");
var xmlio = require("./xmlio");
var tsInterfaces = require("./typesystem-interfaces");
var MetaInfo = (function (_super) {
    __extends(MetaInfo, _super);
    function MetaInfo(_name, _value, inhertitable) {
        if (inhertitable === void 0) { inhertitable = false; }
        _super.call(this, inhertitable);
        this._name = _name;
        this._value = _value;
    }
    MetaInfo.prototype.value = function () {
        return this._value;
    };
    MetaInfo.prototype.requiredType = function () {
        return ts.ANY;
    };
    MetaInfo.prototype.facetName = function () {
        return this._name;
    };
    MetaInfo.prototype.kind = function () {
        //to be overriden in subtypes
        return null;
    };
    return MetaInfo;
}(ts.TypeInformation));
exports.MetaInfo = MetaInfo;
var Description = (function (_super) {
    __extends(Description, _super);
    function Description(value) {
        _super.call(this, "description", value);
    }
    Description.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Description;
    };
    return Description;
}(MetaInfo));
exports.Description = Description;
var NotScalar = (function (_super) {
    __extends(NotScalar, _super);
    function NotScalar() {
        _super.call(this, "notScalar", true);
    }
    NotScalar.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.NotScalar;
    };
    return NotScalar;
}(MetaInfo));
exports.NotScalar = NotScalar;
var DisplayName = (function (_super) {
    __extends(DisplayName, _super);
    function DisplayName(value) {
        _super.call(this, "displayName", value);
    }
    DisplayName.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.DisplayName;
    };
    return DisplayName;
}(MetaInfo));
exports.DisplayName = DisplayName;
var Usage = (function (_super) {
    __extends(Usage, _super);
    function Usage(value) {
        _super.call(this, "usage", value);
    }
    Usage.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Usage;
    };
    return Usage;
}(MetaInfo));
exports.Usage = Usage;
var Annotation = (function (_super) {
    __extends(Annotation, _super);
    function Annotation(name, value) {
        _super.call(this, name, value);
    }
    Annotation.prototype.validateSelf = function (registry, ofExample) {
        if (ofExample === void 0) { ofExample = false; }
        var tp = registry.get(this.facetName());
        if (!tp) {
            return ts.error(messageRegistry.UNKNOWN_ANNOTATION, this, { facetName: this.facetName() });
        }
        var result = ts.ok();
        var q = this.value();
        if (!q) {
            if (tp.isString()) {
                q = "";
            }
        }
        var aTargets = tp.metaOfType(AllowedTargets);
        var contextTarget = ofExample ? "Example" : "TypeDeclaration";
        if (aTargets.length > 0) {
            var arr = [];
            var at = aTargets.filter(function (x) {
                var val = x.value();
                if (Array.isArray(val)) {
                    arr = arr.concat(val);
                    return val.indexOf(contextTarget) >= 0;
                }
                arr.push(val);
                return val == contextTarget;
            });
            if (at.length == 0) {
                var list = arr.map(function (x) { return ("'" + x + "'"); }).join(", ");
                var targetStatus = ts.error(messageRegistry.INVALID_ANNOTATION_LOCATION, this, { aName: _super.prototype.facetName.call(this), aValues: list });
                result.addSubStatus(targetStatus);
            }
        }
        var valOwner = tp.validateDirect(q, true, false);
        if (!valOwner.isOk()) {
            var res = ts.error(messageRegistry.INVALID_ANNOTATION_VALUE, this, { msg: valOwner.getMessage() });
            res.addSubStatus(valOwner);
            result.addSubStatus(res);
        }
        result.setValidationPath({ name: "(" + this.facetName() + ")" });
        return result;
    };
    Annotation.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Annotation;
    };
    return Annotation;
}(MetaInfo));
exports.Annotation = Annotation;
var FacetDeclaration = (function (_super) {
    __extends(FacetDeclaration, _super);
    function FacetDeclaration(name, _type, optional) {
        _super.call(this, name, _type, true);
        this.name = name;
        this._type = _type;
        this.optional = optional;
    }
    FacetDeclaration.prototype.actualName = function () {
        if (this.name.charAt(this.name.length - 1) == '?') {
            return this.name.substr(0, this.name.length - 1);
        }
        return this.name;
    };
    FacetDeclaration.prototype.isOptional = function () {
        return this.optional;
    };
    FacetDeclaration.prototype.type = function () {
        return this._type;
    };
    FacetDeclaration.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.FacetDeclaration;
    };
    return FacetDeclaration;
}(MetaInfo));
exports.FacetDeclaration = FacetDeclaration;
var CustomFacet = (function (_super) {
    __extends(CustomFacet, _super);
    function CustomFacet(name, value) {
        _super.call(this, name, value, true);
    }
    CustomFacet.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.CustomFacet;
    };
    return CustomFacet;
}(MetaInfo));
exports.CustomFacet = CustomFacet;
function serializeToXml(value, type) {
    return xmlio.serializeToXML(value, type);
}
function parseExampleIfNeeded(val, type) {
    if (typeof val === 'string') {
        if (type.isObject() || type.isArray() || type.isExternal() || type.isUnion()) {
            var exampleString = val;
            var firstChar = exampleString.trim().charAt(0);
            if (firstChar == "{" || firstChar == "[" || exampleString.trim() == "null") {
                try {
                    return JSON.parse(exampleString);
                }
                catch (e) {
                    if (type.isObject() || type.isArray()) {
                        var c = ts.error(messageRegistry.CAN_NOT_PARSE_JSON, this, { msg: e.message });
                        return c;
                    }
                }
            }
            if (firstChar == "<") {
                try {
                    var jsonFromXml = xmlio.readObject(exampleString, type);
                    var errors = xmlio.getXmlErrors(jsonFromXml);
                    if (errors) {
                        var error = ts.error(messageRegistry.INVALID_XML, null);
                        errors.forEach(function (child) { return error.addSubStatus(child); });
                        return error;
                    }
                    return jsonFromXml;
                }
                catch (e) {
                }
            }
        }
    }
    if (type.getExtra(tsInterfaces.REPEAT)) {
        val = [val];
    }
    return val;
}
var Example = (function (_super) {
    __extends(Example, _super);
    function Example(value) {
        _super.call(this, "example", value);
    }
    Example.prototype.validateSelf = function (registry) {
        var status = ts.ok();
        status.addSubStatus(this.validateValue(registry));
        var aStatus = this.validateAnnotations(registry);
        aStatus.setValidationPath({ name: this.facetName() });
        status.addSubStatus(aStatus);
        return status;
    };
    Example.prototype.validateValue = function (registry) {
        var val = this.value();
        var isVal = false;
        if (typeof val === "object" && val) {
            if (val.value) {
                if (val.strict === false) {
                    return ts.ok();
                }
                if (val.strict && typeof val.strict != "boolean") {
                    var s = ts.error(messageRegistry.STRICT_BOOLEAN, this);
                    s.setValidationPath({ name: "example", child: { name: "strict" } });
                    return s;
                }
                val = val.value;
                isVal = true;
            }
        }
        var rr = parseExampleIfNeeded(val, this.owner());
        if (rr instanceof ts.Status) {
            rr.setValidationPath({ name: "example" });
            return rr;
        }
        var valOwner = this.owner().validateDirect(rr, true, false);
        if (!valOwner.isOk()) {
            if (typeof this.value() === "string") {
            }
            var c = ts.error(messageRegistry.INVALID_EXMAPLE, this, { msg: valOwner.getMessage() });
            valOwner.getErrors().forEach(function (x) {
                c.addSubStatus(x);
                if (isVal) {
                    x.setValidationPath({ name: "example", child: { name: "value" } });
                }
                else {
                    x.setValidationPath({ name: "example" });
                }
            });
            return c;
        }
        return ts.ok();
    };
    Example.prototype.validateAnnotations = function (registry) {
        var status = ts.ok();
        var val = this.value();
        if (typeof val === "object" && val) {
            if (val.value) {
                var usedAnnotations = Object.keys(val).filter(function (x) {
                    return x.length > 2 && x.charAt(0) == "(" && x.charAt(x.length - 1) == ")";
                });
                for (var _i = 0, usedAnnotations_1 = usedAnnotations; _i < usedAnnotations_1.length; _i++) {
                    var ua = usedAnnotations_1[_i];
                    var aValue = val[ua];
                    var aName = ua.substring(1, ua.length - 1);
                    var aInstance = new Annotation(aName, aValue);
                    status.addSubStatus(aInstance.validateSelf(registry, true));
                }
            }
        }
        return status;
    };
    Example.prototype.example = function () {
        var val = this.value();
        if (typeof val === "object" && val) {
            if (val.value) {
                val = val.value;
            }
        }
        return parseExampleIfNeeded(val, this.owner());
    };
    Example.prototype.asXMLString = function () {
        var value = this.value();
        if (typeof value === 'string' && value.trim().indexOf('<') === 0) {
            return value;
        }
        var parsedValue = parseExampleIfNeeded(value, this.owner());
        return serializeToXml(parsedValue, this.owner());
    };
    Example.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Example;
    };
    return Example;
}(MetaInfo));
exports.Example = Example;
var Required = (function (_super) {
    __extends(Required, _super);
    function Required(value) {
        _super.call(this, "required", value);
    }
    Required.prototype.validateSelf = function (registry) {
        if (typeof this.value() !== "boolean") {
            return ts.error(messageRegistry.REQUIRED_BOOLEAN, this);
        }
        return ts.ok();
    };
    Required.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Required;
    };
    return Required;
}(MetaInfo));
exports.Required = Required;
var HasPropertiesFacet = (function (_super) {
    __extends(HasPropertiesFacet, _super);
    function HasPropertiesFacet() {
        _super.call(this, "hasPropertiesFacet", null);
    }
    HasPropertiesFacet.prototype.validateSelf = function (registry) {
        return ts.ok();
    };
    HasPropertiesFacet.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.HasPropertiesFacet;
    };
    return HasPropertiesFacet;
}(MetaInfo));
exports.HasPropertiesFacet = HasPropertiesFacet;
var AllowedTargets = (function (_super) {
    __extends(AllowedTargets, _super);
    function AllowedTargets(value) {
        _super.call(this, "allowedTargets", value);
    }
    AllowedTargets.prototype.validateSelf = function (registry) {
        return ts.ok();
    };
    AllowedTargets.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.AllowedTargets;
    };
    return AllowedTargets;
}(MetaInfo));
exports.AllowedTargets = AllowedTargets;
var Examples = (function (_super) {
    __extends(Examples, _super);
    function Examples(value) {
        _super.call(this, "examples", value);
    }
    Examples.prototype.examples = function () {
        var _this = this;
        var v = this.value();
        var result = [];
        Object.keys(v).forEach(function (x) {
            if (typeof v[x] == 'object' && v[x]) {
                var val = v[x].value;
                if (!val) {
                    val = v[x];
                }
                var example = parseExampleIfNeeded(val, _this.owner());
                result.push(example);
            }
        });
        return result;
    };
    Examples.prototype.asXMLStrings = function () {
        var _this = this;
        var value = this.value();
        var result = {};
        Object.keys(value).forEach(function (key) {
            var childValue = value[key];
            if (typeof childValue === 'string' && childValue.trim().indexOf('<') === 0) {
                result[key] = childValue;
                return;
            }
            var parsedValue = parseExampleIfNeeded(childValue, _this.owner());
            result[key] = serializeToXml(parsedValue, _this.owner());
        });
        return result;
    };
    Examples.prototype.validateSelf = function (registry) {
        var _this = this;
        if (typeof this.value() === 'object') {
            var rs = new typesystem_1.Status(typesystem_1.Status.OK, "", "", this);
            var v = this.value();
            if (v) {
                Object.keys(v).forEach(function (x) {
                    if (v[x]) {
                        var val = v[x].value;
                        var noVal = !val;
                        if (noVal) {
                            val = v[x];
                        }
                        else {
                            if (v[x].strict === false) {
                                return;
                            }
                            if (v[x].strict && typeof v[x].strict != "boolean") {
                                var s = ts.error(messageRegistry.STRICT_BOOLEAN, _this);
                                s.setValidationPath({ name: x, child: { name: "strict", child: { name: "strict" } } });
                                return s;
                            }
                        }
                        var example = parseExampleIfNeeded(val, _this.owner());
                        if (example instanceof ts.Status) {
                            examplesPatchPath(example, noVal, x);
                            rs.addSubStatus(example);
                            return;
                        }
                        var res = _this.owner().validate(example, true, false);
                        res.getErrors().forEach(function (ex) {
                            rs.addSubStatus(ex);
                            examplesPatchPath(ex, noVal, x);
                        });
                        if (typeof v[x] == "object" && v[x].value) {
                            Object.keys(v[x]).forEach(function (key) {
                                if (key.charAt(0) == '(' && key.charAt(key.length - 1) == ')') {
                                    var a = new Annotation(key.substring(1, key.length - 1), v[x][key]);
                                    var aRes = a.validateSelf(registry, true);
                                    examplesPatchPath(aRes, true, x);
                                    rs.addSubStatus(aRes);
                                }
                            });
                        }
                    }
                });
            }
            return rs;
        }
        else {
            return ts.error(messageRegistry.EXMAPLES_MAP, this);
        }
    };
    Examples.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Examples;
    };
    return Examples;
}(MetaInfo));
exports.Examples = Examples;
function examplesPatchPath(example, noVal, x) {
    if (noVal) {
        example.setValidationPath({ name: "examples", child: { name: x } });
    }
    else {
        example.setValidationPath({ name: "examples", child: { name: x, child: { name: "value" } } });
    }
}
var XMLInfo = (function (_super) {
    __extends(XMLInfo, _super);
    function XMLInfo(o) {
        _super.call(this, "xml", o);
    }
    XMLInfo.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.XMLInfo;
    };
    return XMLInfo;
}(MetaInfo));
exports.XMLInfo = XMLInfo;
var Default = (function (_super) {
    __extends(Default, _super);
    function Default(value) {
        _super.call(this, "default", value);
    }
    Default.prototype.validateSelf = function (registry) {
        var valOwner = this.owner().validateDirect(this.value(), true);
        if (!valOwner.isOk()) {
            return ts.error(messageRegistry.INVALID_DEFAULT_VALUE, this, { msg: valOwner.getMessage() });
        }
        return ts.ok();
    };
    Default.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Default;
    };
    return Default;
}(MetaInfo));
exports.Default = Default;
var Discriminator = (function (_super) {
    __extends(Discriminator, _super);
    function Discriminator(property) {
        _super.call(this, true);
        this.property = property;
    }
    Discriminator.prototype.requiredType = function () {
        return ts.OBJECT;
    };
    Discriminator.prototype.value = function () {
        return this.property;
    };
    Discriminator.prototype.facetName = function () { return "discriminator"; };
    Discriminator.prototype.validateSelf = function (registry) {
        var _this = this;
        var result = ts.ok();
        if (this.owner().isUnion()) {
            result = ts.error(messageRegistry.DISCRIMINATOR_FOR_UNION, this);
        }
        else if (!this.owner().isSubTypeOf(ts.OBJECT)) {
            result = ts.error(messageRegistry.DISCRIMINATOR_FOR_OBJECT, this);
        }
        else if (this.owner().getExtra(ts.GLOBAL) === false) {
            result = ts.error(messageRegistry.DISCRIMINATOR_FOR_INLINE, this);
        }
        else {
            var prop = _.find(this.owner().meta(), function (x) { return x instanceof restrictions_1.PropertyIs && x.propertyName() == _this.value(); });
            if (!prop) {
                result = ts.error(messageRegistry.UNKNOWN_FOR_DISCRIMINATOR, this, { value: this.value() }, ts.Status.WARNING);
            }
            else if (!prop.value().isScalar()) {
                result = ts.error(messageRegistry.SCALAR_FOR_DISCRIMINATOR, this);
            }
        }
        result.setValidationPath({ name: this.facetName() });
        return result;
    };
    Discriminator.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.Discriminator;
    };
    return Discriminator;
}(ts.TypeInformation));
exports.Discriminator = Discriminator;
var DiscriminatorValue = (function (_super) {
    __extends(DiscriminatorValue, _super);
    function DiscriminatorValue(_value, strict) {
        if (strict === void 0) { strict = true; }
        _super.call(this, false);
        this._value = _value;
        this.strict = strict;
    }
    DiscriminatorValue.prototype.check = function (i, path) {
        var owner = this.owner(); //_.find([t].concat(t.allSuperTypes()),x=>x.getExtra(TOPLEVEL));
        var dVal = this.value();
        var discriminator = owner.metaOfType(Discriminator);
        if (discriminator.length == 0) {
            return ts.ok();
        }
        var dName = discriminator[0].value();
        // if(owner) {
        //     dVal = owner.name();
        // }
        // var discriminatorValue = t.metaOfType(metaInfo.DiscriminatorValue);
        // if(discriminatorValue.length!=0){
        //     dVal = discriminatorValue[0].value();
        // }
        if (dVal) {
            if (i.hasOwnProperty(dName)) {
                var adVal = i[dName];
                if (adVal != dVal) {
                    var wrng = ts.error(typesystem_1.Status.CODE_INCORRECT_DISCRIMINATOR, this, {
                        rootType: owner.name(),
                        value: adVal,
                        propName: dName
                    }, typesystem_1.Status.WARNING);
                    //var wrng = new Status(Status.WARNING, Status.CODE_INCORRECT_DISCRIMINATOR, dVal, this);
                    wrng.setValidationPath({ name: dName, child: path });
                    return wrng;
                }
                return ts.ok();
            }
            else {
                var err = ts.error(typesystem_1.Status.CODE_MISSING_DISCRIMINATOR, this, {
                    rootType: owner.name(),
                    propName: dName
                });
                //var err = new Status(Status.ERROR, Status.CODE_MISSING_DISCRIMINATOR, dVal, this);
                err.setValidationPath(path);
                return err;
            }
        }
    };
    DiscriminatorValue.prototype.facetName = function () { return "discriminatorValue"; };
    DiscriminatorValue.prototype.validateSelf = function (registry) {
        if (!this.strict) {
            return ts.ok();
        }
        if (!this.owner().isSubTypeOf(ts.OBJECT)) {
            return ts.error(messageRegistry.DISCRIMINATOR_FOR_OBJECT, this);
        }
        if (this.owner().getExtra(ts.GLOBAL) === false) {
            return ts.error(messageRegistry.DISCRIMINATOR_FOR_INLINE, this);
        }
        var ds = this.owner().oneMeta(Discriminator);
        if (!ds) {
            return ts.error(messageRegistry.DISCRIMINATOR_VALUE_WITHOUT_DISCRIMINATOR, this);
        }
        var prop = _.find(this.owner().meta(), function (x) {
            return x instanceof restrictions_1.PropertyIs && x.propertyName() == ds.value();
        });
        if (prop) {
            var sm = prop.value().validate(this.value());
            if (!sm.isOk()) {
                return ts.error(messageRegistry.INVALID_DISCRIMINATOR_VALUE, this, { msg: sm.getMessage() });
            }
        }
        return ts.ok();
    };
    DiscriminatorValue.prototype.requiredType = function () {
        return ts.OBJECT;
    };
    DiscriminatorValue.prototype.value = function () {
        return this._value;
    };
    DiscriminatorValue.prototype.kind = function () {
        return tsInterfaces.MetaInformationKind.DiscriminatorValue;
    };
    DiscriminatorValue.prototype.isStrict = function () { return this.strict; };
    return DiscriminatorValue;
}(ts.Constraint));
exports.DiscriminatorValue = DiscriminatorValue;
//# sourceMappingURL=metainfo.js.map