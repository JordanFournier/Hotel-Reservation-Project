{
  "_args": [
    [
      {
        "raw": "raml-sanitize@github:jstoiko/node-raml-sanitize#raml1.0",
        "scope": null,
        "escapedName": "raml-sanitize",
        "name": "raml-sanitize",
        "rawSpec": "github:jstoiko/node-raml-sanitize#raml1.0",
        "spec": "github:jstoiko/node-raml-sanitize#raml1.0",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jstoiko/node-raml-sanitize.git#raml1.0",
          "sshUrl": "git+ssh://git@github.com/jstoiko/node-raml-sanitize.git#raml1.0",
          "httpsUrl": "git+https://github.com/jstoiko/node-raml-sanitize.git#raml1.0",
          "gitUrl": "git://github.com/jstoiko/node-raml-sanitize.git#raml1.0",
          "shortcut": "github:jstoiko/node-raml-sanitize#raml1.0",
          "directUrl": "https://raw.githubusercontent.com/jstoiko/node-raml-sanitize/raml1.0/package.json"
        }
      },
      "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey\\node_modules\\osprey-method-handler"
    ]
  ],
  "_from": "jstoiko/node-raml-sanitize#raml1.0",
  "_id": "raml-sanitize@1.2.0",
  "_inCache": true,
  "_location": "/raml-sanitize",
  "_phantomChildren": {},
  "_requested": {
    "raw": "raml-sanitize@github:jstoiko/node-raml-sanitize#raml1.0",
    "scope": null,
    "escapedName": "raml-sanitize",
    "name": "raml-sanitize",
    "rawSpec": "github:jstoiko/node-raml-sanitize#raml1.0",
    "spec": "github:jstoiko/node-raml-sanitize#raml1.0",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jstoiko/node-raml-sanitize.git#raml1.0",
      "sshUrl": "git+ssh://git@github.com/jstoiko/node-raml-sanitize.git#raml1.0",
      "httpsUrl": "git+https://github.com/jstoiko/node-raml-sanitize.git#raml1.0",
      "gitUrl": "git://github.com/jstoiko/node-raml-sanitize.git#raml1.0",
      "shortcut": "github:jstoiko/node-raml-sanitize#raml1.0",
      "directUrl": "https://raw.githubusercontent.com/jstoiko/node-raml-sanitize/raml1.0/package.json"
    }
  },
  "_requiredBy": [
    "/osprey-method-handler",
    "/raml-path-match"
  ],
  "_resolved": "git://github.com/jstoiko/node-raml-sanitize.git#7d37f6369ddcd0ca743efbf4cc3d16e50076da40",
  "_shasum": "ef645e7d85d573261c944af80f67ad4ceecc7ce3",
  "_shrinkwrap": null,
  "_spec": "raml-sanitize@github:jstoiko/node-raml-sanitize#raml1.0",
  "_where": "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey\\node_modules\\osprey-method-handler",
  "author": {
    "name": "MuleSoft, Inc."
  },
  "bugs": {
    "url": "https://github.com/mulesoft/node-raml-sanitize/issues"
  },
  "dependencies": {},
  "description": "Sanitization of RAML parameters into strict values",
  "devDependencies": {
    "chai": "^3.5.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.0",
    "standard": "^8.3.0"
  },
  "gitHead": "7d37f6369ddcd0ca743efbf4cc3d16e50076da40",
  "homepage": "https://github.com/mulesoft/node-raml-sanitize",
  "keywords": [
    "raml",
    "schema",
    "sanitization",
    "types"
  ],
  "license": "Apache-2.0",
  "main": "raml-sanitize.js",
  "name": "raml-sanitize",
  "optionalDependencies": {},
  "readme": "# RAML Sanitize\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![Build status][travis-image]][travis-url]\r\n[![Test coverage][coveralls-image]][coveralls-url]\r\n\r\nStrict sanitization of [RAML 0.8 named parameters](https://github.com/raml-org/raml-spec/blob/master/versions/raml-08/raml-08.md#named-parameters) and [RAML 1.0 built-in types](https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md#built-in-types).\r\n\r\n## Why?\r\n\r\nThis module sanitizes values using the RAML parameter syntax. You should use this if you need to convert any request parameters (usually strings) into the corresponding JavaScript types. For example, form request bodies, query parameters and headers all have no concept of types. After running sanitization, you can use [raml-validate](https://github.com/mulesoft/node-raml-validate) to validate the strict values.\r\n\r\n## Installation\r\n\r\n```shell\r\nnpm install raml-sanitize --save\r\n```\r\n\r\n## Usage\r\n\r\nThe module exports a function that needs to be invoked to get a sanitization instance.\r\n\r\n```javascript\r\nvar sanitize = require('raml-sanitize')();\r\n\r\nvar user = sanitize({\r\n  username: {\r\n    type: 'string'\r\n  },\r\n  password: {\r\n    type: 'string'\r\n  },\r\n  birthday: {\r\n    type: 'date',\r\n    default: new Date()\r\n  }\r\n});\r\n\r\nuser({\r\n  username: 'blakeembrey',\r\n  password: 'hunter2'\r\n});\r\n// => { username: 'blakeembrey', password: 'hunter2', birthday: new Date() }\r\n```\r\n\r\n**Module does not currently support [wild-card parameters](https://github.com/raml-org/raml-spec/blob/master/raml-0.8.md#headers)**\r\n\r\n### Type sanitization\r\n\r\nThe module comes with built-in type sanitization of `string`, `number`, `integer`, `array`, `object`, `date` and `boolean`. To add a new type sanitization, add a new property with the corresponding name to the `sanitize.TYPES` object.\r\n\r\n### Rule sanitization\r\n\r\nThe module can be extended with rule sanitization by adding properties to the `sanitize.RULES` object. A few core rules are implemented by default and can not be overriden - `repeat`, `default` and `type`.\r\n\r\n#### Empty values\r\n\r\nEmpty values are automatically allowed to pass through sanitization. The only values considered to be empty are `undefined` and `null`.\r\n\r\n#### Default values\r\n\r\nWhen the value is empty and a `default` value has been provided, it will return the default value instead.\r\n\r\n#### Repeated values\r\n\r\nWhen the repeat flag is set to `true`, the return value will be an array. If the value is not an array, it will be wrapped in an array. If the value is empty, an empty array will be returned.\r\n\r\n### Caveats\r\n\r\n#### Type Expressions (RAML 1.0)\r\n\r\nThe module does not support [type expressions](https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md#type-expressions).\r\n\r\n#### Invalid Sanitization\r\n\r\nIf a sanitization is invalid, the original value will be returned instead.\r\n\r\n#### Booleans\r\n\r\nOnly `false`, `0`, `\"false\"`, `\"0\"` and `\"\"` will return `false`. Everything else is considered `true`.\r\n\r\n## License\r\n\r\nApache 2.0\r\n\r\n[npm-image]: https://img.shields.io/npm/v/raml-sanitize.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/raml-sanitize\r\n[travis-image]: https://img.shields.io/travis/mulesoft/node-raml-sanitize.svg?style=flat\r\n[travis-url]: https://travis-ci.org/mulesoft/node-raml-sanitize\r\n[coveralls-image]: https://img.shields.io/coveralls/mulesoft/node-raml-sanitize.svg?style=flat\r\n[coveralls-url]: https://coveralls.io/r/mulesoft/node-raml-sanitize?branch=master\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mulesoft/node-raml-sanitize.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "npm run lint; npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec --bail"
  },
  "version": "1.2.0"
}
