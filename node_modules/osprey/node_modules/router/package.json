{
  "_args": [
    [
      {
        "raw": "router@git+https://github.com/blakeembrey/router.git#router-engine",
        "scope": null,
        "escapedName": "router",
        "name": "router",
        "rawSpec": "git+https://github.com/blakeembrey/router.git#router-engine",
        "spec": "git+https://github.com/blakeembrey/router.git#router-engine",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:blakeembrey/router.git#router-engine",
          "sshUrl": "git+ssh://git@github.com/blakeembrey/router.git#router-engine",
          "httpsUrl": "git+https://github.com/blakeembrey/router.git#router-engine",
          "gitUrl": "git://github.com/blakeembrey/router.git#router-engine",
          "shortcut": "github:blakeembrey/router#router-engine",
          "directUrl": "https://raw.githubusercontent.com/blakeembrey/router/router-engine/package.json"
        }
      },
      "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey\\node_modules\\osprey-router"
    ]
  ],
  "_from": "git+https://github.com/blakeembrey/router.git#router-engine",
  "_id": "router@1.1.4",
  "_inCache": true,
  "_location": "/router",
  "_phantomChildren": {
    "ms": "0.7.1"
  },
  "_requested": {
    "raw": "router@git+https://github.com/blakeembrey/router.git#router-engine",
    "scope": null,
    "escapedName": "router",
    "name": "router",
    "rawSpec": "git+https://github.com/blakeembrey/router.git#router-engine",
    "spec": "git+https://github.com/blakeembrey/router.git#router-engine",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:blakeembrey/router.git#router-engine",
      "sshUrl": "git+ssh://git@github.com/blakeembrey/router.git#router-engine",
      "httpsUrl": "git+https://github.com/blakeembrey/router.git#router-engine",
      "gitUrl": "git://github.com/blakeembrey/router.git#router-engine",
      "shortcut": "github:blakeembrey/router#router-engine",
      "directUrl": "https://raw.githubusercontent.com/blakeembrey/router/router-engine/package.json"
    }
  },
  "_requiredBy": [
    "/osprey-router"
  ],
  "_resolved": "git+https://github.com/blakeembrey/router.git#cfe18f9d59adca65c24c9c951ebd43e9bf07937e",
  "_shasum": "d3ea6fe1f88f01cda948a7d6527996925af25c74",
  "_shrinkwrap": null,
  "_spec": "router@git+https://github.com/blakeembrey/router.git#router-engine",
  "_where": "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey\\node_modules\\osprey-router",
  "author": {
    "name": "Douglas Christopher Wilson",
    "email": "doug@somethingdoug.com"
  },
  "bugs": {
    "url": "https://github.com/pillarjs/router/issues"
  },
  "dependencies": {
    "array-flatten": "2.0.0",
    "debug": "~2.2.0",
    "methods": "~1.1.2",
    "parseurl": "~1.3.1",
    "path-to-regexp": "0.1.7",
    "setprototypeof": "1.0.0",
    "utils-merge": "1.0.0"
  },
  "description": "Simple middleware-style router",
  "devDependencies": {
    "after": "0.8.1",
    "finalhandler": "0.4.1",
    "istanbul": "0.4.2",
    "mocha": "2.3.4",
    "supertest": "1.1.0"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "files": [
    "lib/",
    "LICENSE",
    "HISTORY.md",
    "README.md",
    "engine.js",
    "index.js"
  ],
  "gitHead": "cfe18f9d59adca65c24c9c951ebd43e9bf07937e",
  "homepage": "https://github.com/pillarjs/router#readme",
  "license": "MIT",
  "name": "router",
  "optionalDependencies": {},
  "readme": "# router\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Node.js Version][node-version-image]][node-version-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n\r\nSimple middleware-style router\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install router\r\n```\r\n\r\n## API\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\nvar http = require('http')\r\nvar Router = require('router')\r\n\r\nvar router = Router()\r\n\r\nrouter.get('/', function (req, res) {\r\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n  res.end('Hello World!')\r\n})\r\n\r\nvar server = http.createServer(function(req, res) {\r\n  router(req, res, finalhandler(req, res))\r\n})\r\n\r\nserver.listen(3000)\r\n```\r\n\r\nThis module is currently an extracted version from the Express project,\r\nbut with the main change being it can be used with a plain `http.createServer`\r\nobject or other web frameworks by removing Express-specific API calls.\r\n\r\n## Router(options)\r\n\r\nOptions\r\n\r\n- `strict`        - When `false` trailing slashes are optional (default: `false`)\r\n- `caseSensitive` - When `true` the routing will be case sensitive. (default: `false`)\r\n- `mergeParams`   - When `true` any `req.params` passed to the router will be\r\n  merged into the router's `req.params`. (default: `false`) ([example](#example-using-mergeparams))\r\n\r\nReturns a function with the signature `router(req, res, callback)` where\r\n`callback([err])` must be provided to handle errors and fall-through from\r\nnot handling requests.\r\n\r\n### router.use([path], ...middleware)\r\n\r\nUse the given middleware function for all http methods on the given `path`,\r\ndefaulting to the root path.\r\n\r\n`router` does not automatically see `use` as a handler. As such, it will not\r\nconsider it one for handling `OPTIONS` requests.\r\n\r\n* Note: If a `path` is specified, that `path` is stripped from the start of\r\n  `req.url`.\r\n\r\n```js\r\nrouter.use(function (req, res, next) {\r\n  // do your things\r\n\r\n  // continue to the next middleware\r\n  // the request will stall if this is not called\r\n  next()\r\n\r\n  // note: you should NOT call `next` if you have begun writing to the response\r\n})\r\n```\r\n\r\n### router\\[method](path, ...[middleware], handler)\r\n\r\nThe [http methods](https://github.com/jshttp/methods/blob/master/index.js) provide\r\nthe routing functionality in `router`.\r\n\r\nThese are functions which you can directly call on the router to register a new\r\n`handler` for the `method` at a specified `path`.\r\n\r\n```js\r\n// handle a `GET` request\r\nrouter.get('/', function (req, res) {\r\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n  res.end('Hello World!')\r\n})\r\n```\r\n\r\nAdditional middleware may be given before the handler. These middleware behave\r\nexactly as normal with one exception: they may invoke `next('route')`.\r\nCalling `next('route')` bypasses the remaining middleware and handler for this\r\nroute, passing the request on to the next route.\r\n\r\n### router.param(name, param_middleware)\r\n\r\nMaps the specified path parameter `name` to a specialized param-capturing middleware.\r\n\r\nThis function positions the middleware in the same stack as `.use`.\r\n\r\nParameter mapping is used to provide pre-conditions to routes\r\nwhich use normalized placeholders. For example a _:user_id_ parameter\r\ncould automatically load a user's information from the database without\r\nany additional code:\r\n\r\n```js\r\nrouter.param('user_id', function (req, res, next, id) {\r\n  User.find(id, function (err, user) {\r\n    if (err) {\r\n      return next(err)\r\n    } else if (!user) {\r\n      return next(new Error('failed to load user'))\r\n    }\r\n    req.user = user\r\n\r\n    // continue processing the request\r\n    next()\r\n  })\r\n})\r\n```\r\n\r\n### router.route(path)\r\n\r\nCreates an instance of a single `Route` for the given `path`.\r\n(See `Router.Route` below)\r\n\r\nRoutes can be used to handle http `methods` with their own, optional middleware.\r\n\r\nUsing `router.route(path)` is a recommended approach to avoiding duplicate\r\nroute naming and thus typo errors.\r\n\r\n```js\r\nvar api = router.route('/api/')\r\n```\r\n\r\n## Router.Route(path)\r\n\r\nRepresents a single route as an instance that can be used can be used to handle\r\nhttp `methods` with it's own, optional middleware.\r\n\r\n### route\\[method](handler)\r\n\r\nThese are functions which you can directly call on a route to register a new\r\n`handler` for the `method` on the route.\r\n\r\n```js\r\n// handle a `GET` request\r\nvar status = router.route('/status')\r\n\r\nstatus.get(function (req, res) {\r\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n  res.end('All Systems Green!')\r\n})\r\n```\r\n\r\n### route.all(handler)\r\n\r\nAdds a handler for all HTTP methods to this route.\r\n\r\nThe handler can behave like middleware and call `next` to continue processing\r\nrather than responding.\r\n\r\n```js\r\nrouter.route('/')\r\n.all(function (req, res, next) {\r\n  next()\r\n})\r\n.all(check_something)\r\n.get(function (req, res) {\r\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n  res.end('Hello World!')\r\n})\r\n```\r\n\r\n## Examples\r\n\r\n```js\r\n// import our modules\r\nvar http = require('http')\r\nvar Router = require('router')\r\nvar finalhandler = require('finalhandler')\r\nvar compression = require('compression')\r\nvar bodyParser = require('body-parser')\r\n\r\n// store our message to display\r\nvar message = \"Hello World!\"\r\n\r\n// initialize the router & server and add a final callback.\r\nvar router = Router()\r\nvar server = http.createServer(function onRequest(req, res) {\r\n  router(req, res, finalhandler(req, res))\r\n})\r\n\r\n// use some middleware and compress all outgoing responses\r\nrouter.use(compression())\r\n\r\n// handle `GET` requests to `/message`\r\nrouter.get('/message', function (req, res) {\r\n  res.statusCode = 200\r\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n  res.end(message + '\\n')\r\n})\r\n\r\n// create and mount a new router for our API\r\nvar api = Router()\r\nrouter.use('/api/', api)\r\n\r\n// add a body parsing middleware to our API\r\napi.use(bodyParser.json())\r\n\r\n// handle `PATCH` requests to `/api/set-message`\r\napi.patch('/set-message', function (req, res) {\r\n  if (req.body.value) {\r\n    message = req.body.value\r\n\r\n    res.statusCode = 200\r\n    res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n    res.end(message + '\\n')\r\n  } else {\r\n    res.statusCode = 400\r\n    res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n    res.end('Invalid API Syntax\\n')\r\n  }\r\n})\r\n\r\n// make our http server listen to connections\r\nserver.listen(8080)\r\n```\r\n\r\nYou can get the message by running this command in your terminal,\r\n or navigating to `127.0.0.1:8080` in a web browser.\r\n```bash\r\ncurl http://127.0.0.1:8080\r\n```\r\n\r\nYou can set the message by sending it a `PATCH` request via this command:\r\n```bash\r\ncurl http://127.0.0.1:8080/api/set-message -X PATCH -H \"Content-Type: application/json\" -d '{\"value\":\"Cats!\"}'\r\n```\r\n\r\n### Example using mergeParams\r\n\r\n```js\r\nvar http = require('http')\r\nvar Router = require('router')\r\nvar finalhandler = require('finalhandler')\r\n\r\n// this example is about the mergeParams option\r\nvar opts = { mergeParams: true }\r\n\r\n// make a router with out special options\r\nvar router = Router(opts)\r\nvar server = http.createServer(function onRequest(req, res) {\r\n\r\n  // set something to be passed into the router\r\n  req.params = { type: 'kitten' }\r\n\r\n  router(req, res, finalhandler(req, res))\r\n})\r\n\r\nrouter.get('/', function (req, res) {\r\n  res.statusCode = 200\r\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n\r\n  // with respond with the the params that were passed in\r\n  res.end(req.params.type + '\\n')\r\n})\r\n\r\n// make another router with our options\r\nvar handler = Router(opts)\r\n\r\n// mount our new router to a route that accepts a param\r\nrouter.use('/:path', handler)\r\n\r\nhandler.get('/', function (req, res) {\r\n  res.statusCode = 200\r\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n\r\n  // will respond with the param of the router's parent route\r\n  res.end(path + '\\n')\r\n})\r\n\r\n// make our http server listen to connections\r\nserver.listen(8080)\r\n```\r\n\r\nNow you can get the type, or what path you are requesting:\r\n```bash\r\ncurl http://127.0.0.1:8080\r\n> kitten\r\ncurl http://127.0.0.1:8080/such_path\r\n> such_path\r\n```\r\n\r\n## Implementing Your Own Router\r\n\r\nImplementing a custom path matching library on top of this module is as easy as using `Router.Engine`. For example, to implement an \"exact\" path matching module, we can do this:\r\n\r\n```js\r\nvar Engine = require('router').Engine\r\nvar slice = Array.prototype.slice\r\n\r\n/**\r\n * Accepts the path and some options we defined in our engine.\r\n */\r\nfunction toFunction (route, options) {\r\n  if (!options.end) {\r\n    return function (path) {\r\n      var matches = path.substr(0, route.length) === route\r\n\r\n      return matches ? { path: path } : false\r\n    }\r\n  }\r\n\r\n  return function (path) {\r\n    return path === route ? { path: path } : false\r\n  }\r\n}\r\n\r\n/**\r\n * The constructor must return the engine instance.\r\n */\r\nfunction ExactRouter (options) {\r\n  return Engine.call(this, options)\r\n}\r\n\r\n/**\r\n * Inherits from the engine prototype.\r\n */\r\nExactRouter.prototype = Object.create(Engine.prototype)\r\n\r\n/**\r\n * Set up `Router#use` with our custom path matching implementation.\r\n */\r\nExactRouter.prototype.use = function () {\r\n  // Use a simple utility for supporting a single path argument like `router`.\r\n  var opts = Engine.sanitizeUse.apply(null, arguments)\r\n  var match = toFunction(opts.path, { end: false })\r\n\r\n  return Engine.prototype.use.call(this, opts.path, match, opts.callbacks)\r\n}\r\n\r\n/**\r\n * Set up `Router#route` with our custom path patching implementation.\r\n */\r\nExactRouter.prototype.route = function (path) {\r\n  var match = toFunction(path, { end: true })\r\n\r\n  return Engine.prototype.route.call(this, path, match)\r\n}\r\n\r\n/**\r\n * Set up all the router method shorthands.\r\n */\r\nEngine.methods.forEach(function (method) {\r\n  ExactRouter.prototype[method] = function (path) {\r\n    var route = this.route(path)\r\n    route[method].apply(route, slice.call(arguments, 1))\r\n    return this\r\n  }\r\n})\r\n```\r\n\r\nBoth the path matching function and the path itself must be passed into the `route` and `use` engine methods. This is for debugging, so `path` should be a human-readable path name. `Engine#use` also accepts an array of handlers to immediately include. The match function must return an object of `{ path: string, params: object }` or `false` if it didn't match.\r\n\r\nNote: The path matching utility should not throw errors. Decoding of parameters is handled by the engine.\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/router.svg\r\n[npm-url]: https://npmjs.org/package/router\r\n[node-version-image]: https://img.shields.io/node/v/router.svg\r\n[node-version-url]: http://nodejs.org/download/\r\n[travis-image]: https://img.shields.io/travis/pillarjs/router/master.svg\r\n[travis-url]: https://travis-ci.org/pillarjs/router\r\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/router/master.svg\r\n[coveralls-url]: https://coveralls.io/r/pillarjs/router?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/router.svg\r\n[downloads-url]: https://npmjs.org/package/router\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pillarjs/router.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
  },
  "version": "1.1.4"
}
