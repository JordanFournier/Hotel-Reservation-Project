{
  "_args": [
    [
      {
        "raw": "osprey-method-handler@github:jstoiko/osprey-method-handler#raml1.0",
        "scope": null,
        "escapedName": "osprey-method-handler",
        "name": "osprey-method-handler",
        "rawSpec": "github:jstoiko/osprey-method-handler#raml1.0",
        "spec": "github:jstoiko/osprey-method-handler#raml1.0",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jstoiko/osprey-method-handler.git#raml1.0",
          "sshUrl": "git+ssh://git@github.com/jstoiko/osprey-method-handler.git#raml1.0",
          "httpsUrl": "git+https://github.com/jstoiko/osprey-method-handler.git#raml1.0",
          "gitUrl": "git://github.com/jstoiko/osprey-method-handler.git#raml1.0",
          "shortcut": "github:jstoiko/osprey-method-handler#raml1.0",
          "directUrl": "https://raw.githubusercontent.com/jstoiko/osprey-method-handler/raml1.0/package.json"
        }
      },
      "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey"
    ]
  ],
  "_from": "jstoiko/osprey-method-handler#raml1.0",
  "_id": "osprey-method-handler@0.10.4",
  "_inCache": true,
  "_location": "/osprey-method-handler",
  "_phantomChildren": {},
  "_requested": {
    "raw": "osprey-method-handler@github:jstoiko/osprey-method-handler#raml1.0",
    "scope": null,
    "escapedName": "osprey-method-handler",
    "name": "osprey-method-handler",
    "rawSpec": "github:jstoiko/osprey-method-handler#raml1.0",
    "spec": "github:jstoiko/osprey-method-handler#raml1.0",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jstoiko/osprey-method-handler.git#raml1.0",
      "sshUrl": "git+ssh://git@github.com/jstoiko/osprey-method-handler.git#raml1.0",
      "httpsUrl": "git+https://github.com/jstoiko/osprey-method-handler.git#raml1.0",
      "gitUrl": "git://github.com/jstoiko/osprey-method-handler.git#raml1.0",
      "shortcut": "github:jstoiko/osprey-method-handler#raml1.0",
      "directUrl": "https://raw.githubusercontent.com/jstoiko/osprey-method-handler/raml1.0/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/jstoiko/osprey-method-handler.git#eb4d3641c42da331ee1227dbee93ed9b676eac29",
  "_shasum": "a972a01d0205c4b0740b263b286002a08d486c5b",
  "_shrinkwrap": null,
  "_spec": "osprey-method-handler@github:jstoiko/osprey-method-handler#raml1.0",
  "_where": "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey",
  "author": {
    "name": "MuleSoft, Inc."
  },
  "bugs": {
    "url": "https://github.com/mulesoft-labs/osprey-method-handler/issues"
  },
  "dependencies": {
    "ajv": "^4.7.0",
    "body-parser": "^1.10.2",
    "busboy": "^0.2.9",
    "compose-middleware": "^2.0.0",
    "debug": "^2.2.0",
    "http-errors": "^1.2.8",
    "is-stream": "^1.0.1",
    "json-schema-compatibility": "^1.0.1",
    "lowercase-keys": "^1.0.0",
    "negotiator": "^0.6.0",
    "object-values": "^1.0.0",
    "parseurl": "^1.3.0",
    "raml-sanitize": "github:jstoiko/node-raml-sanitize#raml1.0",
    "raml-validate": "github:jstoiko/node-raml-validate#raml1.0",
    "standard-headers": "^0.1.0",
    "stream-equal": "^0.1.5",
    "type-is": "^1.5.5",
    "xtend": "^4.0.0"
  },
  "description": "Middleware for validating requests and responses based on a RAML method object",
  "devDependencies": {
    "chai": "^3.5.0",
    "es6-promise": "^3.0.2",
    "finalhandler": "^0.4.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.0",
    "osprey-router": "^0.3.0",
    "popsicle": "^5.0.0",
    "popsicle-server": "^1.0.0",
    "pre-commit": "^1.0.5",
    "standard": "^8.3.0"
  },
  "files": [
    "osprey-method-handler.js",
    "LICENSE"
  ],
  "gitHead": "eb4d3641c42da331ee1227dbee93ed9b676eac29",
  "homepage": "https://github.com/mulesoft-labs/osprey-method-handler",
  "keywords": [
    "raml",
    "osprey",
    "method",
    "resource",
    "handler",
    "middleware",
    "express",
    "json",
    "schemas",
    "validation"
  ],
  "license": "Apache-2.0",
  "main": "osprey-method-handler.js",
  "name": "osprey-method-handler",
  "optionalDependencies": {},
  "readme": "# Osprey Method Handler\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Build status][travis-image]][travis-url]\r\n[![Test coverage][coveralls-image]][coveralls-url]\r\n\r\nMiddleware for validating requests and responses based on a RAML method object.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install osprey-method-handler --save\r\n```\r\n\r\n## Features\r\n\r\n* Supports RAML 0.8 and RAML 1.0\r\n* Header validation (ignores undocumented headers)\r\n* Query validation (ignores undocumented parameters)\r\n* Request body validation\r\n  * JSON schemas\r\n  * XML schemas\r\n  * URL-encoded `formParameters` (ignores undocumented parameters)\r\n  * Multipart form data `formParameters` (ignores undocumented parameters)\r\n  * Discards unknown bodies\r\n* Accept content type negotiation (based on defined success response bodies)\r\n* Automatically parsed request bodies\r\n  * JSON (`req.body`)\r\n  * URL-encoded (`req.body`)\r\n  * XML ([`req.xml`](https://github.com/polotek/libxmljs))\r\n  * Form Data (`req.form` using [Busboy](https://github.com/mscdex/busboy), but you need to pipe the request into it - `req.pipe(req.form)`)\r\n\r\n**Please note:** Due to the build time of `libxmljs`, it does not come bundled. If you need XML validation, please install `libxmljs` as a dependency of your own project.\r\n\r\n## Usage\r\n\r\n```js\r\nvar express = require('express')\r\nvar handler = require('osprey-method-handler')\r\nvar app = express()\r\n\r\napp.post('/users', handler({\r\n  headers: {},\r\n  responses: {\r\n    '200': {\r\n      body: {\r\n        'application/json': {\r\n          schema: '...',\r\n          example: '...'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  body: {\r\n    'application/json': {\r\n      schema: '...'\r\n    }\r\n  }\r\n}, '/users', 'POST', { /* ... */ }), function (req, res) {\r\n  res.send('success')\r\n})\r\n```\r\n\r\nAccepts the RAML schema as the first argument, method and path in subsequent arguments (mostly for debugging) and options as the final argument.\r\n\r\n**Options**\r\n\r\n* `discardUnknownBodies` Discard undefined request streams (default: `true`)\r\n* `discardUnknownQueryParameters` Discard undefined query parameters (default: `true`)\r\n* `discardUnknownHeaders` Discard undefined header parameters (always includes known headers) (default: `true`)\r\n* `parseBodiesOnWildcard` Toggle parsing bodies on wildcard body support (default: `false`)\r\n* `reviver` The [reviver](https://github.com/expressjs/body-parser#reviver) passed to `JSON.parse` for JSON endpoints\r\n* `limit` The [maximum bytes](https://github.com/expressjs/body-parser#limit-2) for XML, JSON and URL-encoded endpoints (default: `'100kb'`)\r\n* `parameterLimit` The [maximum number](https://github.com/expressjs/body-parser#parameterlimit) of URL-encoded parameters (default: `1000`)\r\n* `busboyLimits` The multipart limits defined by [Busboy](https://github.com/mscdex/busboy#busboy-methods)\r\n* `RAMLVersion` The RAML version passed to [raml-validate](https://github.com/mulesoft/node-raml-validate) (default: `RAML10`)\r\n\r\n### Adding JSON schemas\r\n\r\nIf you are using external JSON schemas with `$ref`, you can add them to the module before you compile the middleware. Use `handler.addJsonSchema(schema, key)` to compile automatically when used.\r\n\r\n### Validation Errors\r\n\r\nThe library intercepts incoming requests and does validation. It will respond with `400`, `406` or `415` error instances from [http-errors](https://github.com/jshttp/http-errors). Validation errors are attached to `400` instances and noted using `ramlValidation = true` and `requestErrors = []` (an array of errors that were found, compatible with [request-error-handler](https://github.com/mulesoft-labs/node-request-error-handler)).\r\n\r\nThe errors object format is:\r\n\r\n```ts\r\ninterface Error {\r\n  type: 'json' | 'form' | 'headers' | 'query' | 'xml'\r\n  message: string\r\n  keyword: string\r\n  dataPath: string\r\n  data: any\r\n  schema: any\r\n  meta?: Object\r\n}\r\n```\r\n\r\n**Please note:** XML validation does not have a way to get the `keyword`, `dataPath`, `data` or `schema`. Instead, it has a `meta` object that contains information from `libxmljs` (`domain`, `code`, `level`, `column`, `line`).\r\n\r\nTo render the error messages for your application, look into error handling for Express, Connect, Router or any other middleware error handler. If you want a pre-built error handler, try using [request-error-handler](https://github.com/mulesoft-labs/node-request-error-handler), which provides a pre-defined error formatter.\r\n\r\n## License\r\n\r\nMIT license\r\n\r\n[npm-image]: https://img.shields.io/npm/v/osprey-method-handler.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/osprey-method-handler\r\n[downloads-image]: https://img.shields.io/npm/dm/osprey-method-handler.svg?style=flat\r\n[downloads-url]: https://npmjs.org/package/osprey-method-handler\r\n[travis-image]: https://img.shields.io/travis/mulesoft-labs/osprey-method-handler.svg?style=flat\r\n[travis-url]: https://travis-ci.org/mulesoft-labs/osprey-method-handler\r\n[coveralls-image]: https://img.shields.io/coveralls/mulesoft-labs/osprey-method-handler.svg?style=flat\r\n[coveralls-url]: https://coveralls.io/r/mulesoft-labs/osprey-method-handler?branch=master\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mulesoft-labs/osprey-method-handler.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "npm run lint && npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec --bail",
    "test-spec": "mocha -R spec --bail"
  },
  "version": "0.10.4"
}
