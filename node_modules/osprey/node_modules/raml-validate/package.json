{
  "_args": [
    [
      {
        "raw": "raml-validate@github:jstoiko/node-raml-validate#raml1.0",
        "scope": null,
        "escapedName": "raml-validate",
        "name": "raml-validate",
        "rawSpec": "github:jstoiko/node-raml-validate#raml1.0",
        "spec": "github:jstoiko/node-raml-validate#raml1.0",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jstoiko/node-raml-validate.git#raml1.0",
          "sshUrl": "git+ssh://git@github.com/jstoiko/node-raml-validate.git#raml1.0",
          "httpsUrl": "git+https://github.com/jstoiko/node-raml-validate.git#raml1.0",
          "gitUrl": "git://github.com/jstoiko/node-raml-validate.git#raml1.0",
          "shortcut": "github:jstoiko/node-raml-validate#raml1.0",
          "directUrl": "https://raw.githubusercontent.com/jstoiko/node-raml-validate/raml1.0/package.json"
        }
      },
      "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey\\node_modules\\osprey-method-handler"
    ]
  ],
  "_from": "jstoiko/node-raml-validate#raml1.0",
  "_id": "raml-validate@1.1.0",
  "_inCache": true,
  "_location": "/raml-validate",
  "_phantomChildren": {},
  "_requested": {
    "raw": "raml-validate@github:jstoiko/node-raml-validate#raml1.0",
    "scope": null,
    "escapedName": "raml-validate",
    "name": "raml-validate",
    "rawSpec": "github:jstoiko/node-raml-validate#raml1.0",
    "spec": "github:jstoiko/node-raml-validate#raml1.0",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jstoiko/node-raml-validate.git#raml1.0",
      "sshUrl": "git+ssh://git@github.com/jstoiko/node-raml-validate.git#raml1.0",
      "httpsUrl": "git+https://github.com/jstoiko/node-raml-validate.git#raml1.0",
      "gitUrl": "git://github.com/jstoiko/node-raml-validate.git#raml1.0",
      "shortcut": "github:jstoiko/node-raml-validate#raml1.0",
      "directUrl": "https://raw.githubusercontent.com/jstoiko/node-raml-validate/raml1.0/package.json"
    }
  },
  "_requiredBy": [
    "/osprey-method-handler",
    "/raml-path-match"
  ],
  "_resolved": "git://github.com/jstoiko/node-raml-validate.git#c1be0e4c84f92de06b7f10c545e9914f4a466513",
  "_shasum": "45cdaf82af734d0711aa7f2c36fc527332969a10",
  "_shrinkwrap": null,
  "_spec": "raml-validate@github:jstoiko/node-raml-validate#raml1.0",
  "_where": "E:\\GitRepos\\Hotel-Reservation-Project\\node_modules\\osprey\\node_modules\\osprey-method-handler",
  "author": {
    "name": "MuleSoft, Inc."
  },
  "bugs": {
    "url": "https://github.com/mulesoft/node-raml-validate/issues"
  },
  "dependencies": {
    "raml-typesystem": "^0.0.55"
  },
  "description": "Strict validation of RAML parameters",
  "devDependencies": {
    "chai": "^3.5.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.0",
    "standard": "^8.3.0"
  },
  "gitHead": "c1be0e4c84f92de06b7f10c545e9914f4a466513",
  "homepage": "https://github.com/mulesoft/node-raml-validate",
  "keywords": [
    "raml",
    "schema",
    "validation"
  ],
  "license": "Apache 2.0",
  "main": "raml-validate.js",
  "name": "raml-validate",
  "optionalDependencies": {},
  "readme": "# RAML Validate\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![Build status][travis-image]][travis-url]\r\n[![Test coverage][coveralls-image]][coveralls-url]\r\n\r\nStrict and pluginable validation of [RAML 0.8 named parameters](https://github.com/raml-org/raml-spec/blob/master/versions/raml-08/raml-08.md#named-parameters) and [RAML 1.0 built-in types](https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md#built-in-types).\r\n\r\n## Installation\r\n\r\n```shell\r\nnpm install raml-validate --save\r\n```\r\n\r\n## Usage\r\n\r\nYou must require the module and call it as a function to get a validation instance back.\r\n\r\n```javascript\r\nvar validate = require('raml-validate')();\r\n\r\n// RAML version to use, either 'RAML10' (default) or 'RAML08'\r\nvar RAMLVersion = 'RAML10'\r\n\r\n// Create a user model schema.\r\nvar user = validate({\r\n  username: {\r\n    type: 'string',\r\n    minLength: 5,\r\n    maxLength: 50,\r\n    required: true\r\n  },\r\n  password: {\r\n    type: 'string',\r\n    minLength: 5,\r\n    maxLength: 50,\r\n    required: true\r\n  }\r\n}, RAMLVersion);\r\n\r\n// Validate a user model.\r\nuser({\r\n  username: 'blakeembrey',\r\n  password: 'super secret password'\r\n}); //=> { valid: true, errors: [] }\r\n```\r\n\r\n**Module does not currently support [wild-card parameters](https://github.com/raml-org/raml-spec/blob/master/raml-0.8.md#headers)**\r\n\r\n### Getting validation errors\r\n\r\nAll validation errors can be retrieved from the `errors` property on the returned object. If `valid === false`, the errors will be set to an array. This can be useful for generating error messages for the client.\r\n\r\n```javascript\r\n[\r\n  {\r\n    valid: false,\r\n    key: 'password',\r\n    value: 'test',\r\n    rule: 'minLength',\r\n    attr: 5\r\n  }\r\n]\r\n```\r\n\r\n### Required validation\r\n\r\nIf the validation does not set `required` to be true, a `null` or `undefined` value will be valid.\r\n\r\n### Repeated validation (RAML 0.8 only)\r\n\r\nThe module has core support for repeated properties in the form of an array. If the validation is set to `repeat`, but does not receive an array - validation will fail with a `repeat` error.\r\n\r\n### Multiple types\r\n\r\nThe module supports multiple types according to the RAML spec (see [RAML 0.8 named parameters with multiple types](https://github.com/raml-org/raml-spec/blob/master/versions/raml-08/raml-08.md#named-parameters-with-multiple-types) and [RAML 1.0 multiple inheritance](https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md#multiple-inheritance)). When multiple types are specified, it'll run the validation against the matching type.\r\n\r\n\r\n```javascript\r\n// RAML 0.8\r\nvalidate({\r\n  file: [{\r\n    type: 'string'\r\n  }, {\r\n    type: 'file'\r\n  }]\r\n});\r\n\r\n// RAML 1.0\r\nvalidate({\r\n  file: {\r\n    type: ['string', 'file']\r\n  }\r\n});\r\n```\r\n\r\nIf any of the types are set to `repeat`, it'll only run that validation object when every value in the array is of the correct type - otherwise you will receive a type error.\r\n\r\n### Adding new types (RAML 0.8 only)\r\n\r\nNew type validations can be added by setting the corresponding property on the `validate.TYPES` object. For example, adding file validation to support buffers can be added by doing:\r\n\r\n```javascript\r\nvalidate.TYPES.file = function (value) {\r\n  return Buffer.isBuffer(value);\r\n};\r\n```\r\n\r\nThe function must accept the value as the first parameter and return a boolean depending on success or failure.\r\n\r\n### Adding new rules (RAML 0.8 only)\r\n\r\nNew rules can be added by setting the corresponding property on the `validate.RULES` object. For example, to add file size support we can do the following:\r\n\r\n```javascript\r\nvalidate.RULES.minFileSize = function (size) {\r\n  return function (value) {\r\n    return value.length <= size;\r\n  };\r\n};\r\n```\r\n\r\nThe function must accept the validation value as its only parameter and is expected to return another function that implements the validation logic. The returned function must accept the value as the first argument, and can optionally accept the key and model as the second and third arguments. This is useful for implementing a rule such as `requires`, where both parameters may be optional; however, when set, depend on eachother being set.\r\n\r\n```javascript\r\nvalidate.RULES.requires = function (property) {\r\n  return function (value, key, object) {\r\n    return value != null && object[property] != null;\r\n  };\r\n};\r\n```\r\n\r\n## License\r\n\r\nApache 2.0\r\n\r\n[npm-image]: https://img.shields.io/npm/v/raml-validate.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/raml-validate\r\n[travis-image]: https://img.shields.io/travis/mulesoft/node-raml-validate.svg?style=flat\r\n[travis-url]: https://travis-ci.org/mulesoft/node-raml-validate\r\n[coveralls-image]: https://img.shields.io/coveralls/mulesoft/node-raml-validate.svg?style=flat\r\n[coveralls-url]: https://coveralls.io/r/mulesoft/node-raml-validate?branch=master\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mulesoft/node-raml-validate.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "npm run lint; npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec --bail"
  },
  "version": "1.1.0"
}
